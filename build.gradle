buildscript {
    ext.versions = [
            virgil_sdk: '5.0.4',
            kotlin: '1.3.0-rc-190',
            junit: '5.2.0',
            dokka: '0.9.17'
    ]

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0'
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${versions.dokka}"
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group 'com.virgilsecurity'
version '0.1.1'

apply plugin: 'kotlin'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'maven'
apply plugin: 'org.jetbrains.dokka'

sourceCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
}

dependencies {
    // Virgil
    compile "com.virgilsecurity.sdk:crypto:${versions.virgil_sdk}"
    compile "com.virgilsecurity.sdk:sdk:${versions.virgil_sdk}"

    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}"

    testCompile "org.junit.jupiter:junit-jupiter-api:${versions.junit}"
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${versions.junit}")
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

def APP_ID = hasProperty('APP_ID') ? APP_ID : System.getenv('APP_ID')
def API_PRIVATE_KEY = hasProperty('API_PRIVATE_KEY') ? API_PRIVATE_KEY : System.getenv('API_PRIVATE_KEY')
def API_PUBLIC_KEY = hasProperty('API_PUBLIC_KEY') ? API_PUBLIC_KEY : System.getenv('API_PUBLIC_KEY')
def API_PUBLIC_KEY_ID = hasProperty('API_PUBLIC_KEY_ID') ? API_PUBLIC_KEY_ID : System.getenv('API_PUBLIC_KEY_ID')

junitPlatformTest {
    systemProperty 'APP_ID', APP_ID
    System.println("VALUE IS: " + APP_ID)
    systemProperty 'API_PRIVATE_KEY', API_PRIVATE_KEY
    systemProperty 'API_PUBLIC_KEY', API_PUBLIC_KEY
    systemProperty 'API_PUBLIC_KEY_ID', API_PUBLIC_KEY_ID
}

task sourcesJar(type: Jar) {
    from(sourceSets["main"].allSource)
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: 'dokka') {
    from "$buildDir/javadoc"
    classifier = 'javadoc'
}

def authentication_username = hasProperty('authentication_username') ? authentication_username : System.getenv('authentication_username')
def authentication_password = hasProperty('authentication_password') ? authentication_password : System.getenv('authentication_password')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'keyknox'
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'Virgil KeyKnox Java/Android SDK'
                description = 'Virgil Security provides an SDK which allows you to communicate with Virgil Keyknox Service. Virgil Keyknox Service allows users to store their sensitive data (such as Private Key) encrypted (with end-to-end encryption) for using and sharing it between different devices.'
                url = 'https://www.virgilsecurity.com/'
                licenses {
                    license {
                        name = 'Virgil Security, Inc. license'
                        url = 'https://github.com/VirgilSecurity/keyknox-kotlin/blob/master/LICENSE.txt'
                    }
                }
                developers {
                    developer {
                        id = 'andrii-iakovenko'
                        name = 'Andrii Iakovenko'
                        email = 'andrii-iakovenko@gmail.com'
                        organizationUrl = 'https://github.com/andrii-iakovenko'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/VirgilSecurity/keyknox-kotlin.git'
                    developerConnection = 'scm:git:git@github.com:VirgilSecurity/keyknox-kotlin.git'
                    url = 'https://github.com/VirgilSecurity/keyknox-kotlin'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username "${authentication_username}"
                password "${authentication_password}"
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

dokka {
    outputFormat = 'html' 
    outputDirectory = "$buildDir/javadoc"
    reportUndocumented = false
}
